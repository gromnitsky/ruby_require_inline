#!/usr/bin/env ruby

require 'optparse'

require_relative '../lib/ruby_require_inline/version'
require_relative '../lib/ruby_require_inline/depswalk'

$conf = {
  banner: "Usage: #{File.basename $0} [-p path] [-o output] input",
  mode: 'tree',               # also: flat
  deps_paths: [],
  output: $stdout,
  input: nil
}



def usage ec = 0
  stream = ec == 0 ? $stdout : $stderr
  stream.puts $conf[:banner]
  exit ec
end



opt_parser = OptionParser.new do |opts|
  opts.banner = $conf[:banner]

  opts.on("-p DIR", "Add path for additional deps search") do |arg|
    $conf[:deps_paths] << arg
  end
  opts.on("-o FILE", "Output file instead of stdout") do |arg|
    $conf[:output] = arg
  end
  opts.on("--flat", "Print a simple list instead of a tree") do
    $conf[:mode] = 'flat'
  end
  opts.on("-V", "--version", "Version info & $:") do
    puts RubyRequireInline::VERSION
    puts $:
    exit 0
  end
end

begin
  opt_parser.parse!
rescue OptionParser::InvalidOption => e
  $stderr.puts e
  usage 1
end

usage 1 if ARGV.size == 0
$conf[:input] = ARGV[0]



dir_orig = Dir.pwd
Dir.chdir File.dirname $conf[:input]
$conf[:input] = File.basename $conf[:input]

dw = RubyRequireInline::DepsWalk.new $conf[:deps_paths], $conf[:input]
dw.start do |file, level, not_found|
  indent = $conf[:mode] == 'tree' ? '  ' * level : ''

  # open output so late because we don't want to destroy the output file
  # for nothing if there was an error in cl params
  if $conf[:output] != $stdout && !$conf[:output].is_a?(IO)
    $conf[:output] = File.open File.join(dir_orig, $conf[:output]), 'w+'
  end

  $conf[:output].printf "%s%s%s\n", indent, file, not_found ? " (not local?)" : ""
  $conf[:output].flush if $conf[:output] == $stdout
end

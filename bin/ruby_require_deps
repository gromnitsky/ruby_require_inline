#!/usr/bin/env ruby

require 'getoptlong'

require 'ruby_parser'

require_relative '../lib/ruby_require_inline/version'
require_relative '../lib/ruby_require_inline/depswalk'

$conf = {
  mode: 'tree',               # also: flat
  verbose: 0,
  output: $stdout,
  input: nil
}



def usage ec = 0
  stream = ec == 0 ? $stdout : $stderr
  stream.puts "Usage: #{File.basename $0} [-o output] input"
  exit ec
end



opts = GetoptLong.new(['--help', '-h', GetoptLong::NO_ARGUMENT],
                      ['--flat', GetoptLong::NO_ARGUMENT],
                      ['-v', GetoptLong::NO_ARGUMENT],
                      ['--version', '-V', GetoptLong::NO_ARGUMENT],
                      ['-o', GetoptLong::REQUIRED_ARGUMENT])

begin
  opts.each do |opt, arg|
    case opt
    when '--help'
      usage
    when '-v'
      $conf[:verbose] += 1
    when '--flat'
      $conf[:mode] = 'flat'
    when '--version'
      puts RequireInline::VERSION
      exit 0
    when '-o'
      $conf[:output] = File.open arg, 'w+'
    end
  end
rescue GetoptLong::InvalidOption
  usage 1
end

usage 1 if ARGV.size == 0
$conf[:input] = ARGV[0]



Dir.chdir File.dirname $conf[:input]
$conf[:input] = File.basename $conf[:input]

dw = RubyRequireInline::DepsWalk.new $conf[:input]
dw.start do |file, level, not_found|
  indent = $conf[:mode] == 'tree' ? '  ' * level : ''
  $conf[:output].printf "%s%s%s\n", indent, file, not_found ? " (not local?)" : ""
  $conf[:output].flush if $conf[:output] == $stdout
end

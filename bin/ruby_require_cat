#!/usr/bin/env ruby

require 'getoptlong'

require 'ruby_parser'

require_relative '../lib/ruby_require_inline/version'

$conf = {
  verbose: 0,
  output: $stdout,
  input: $stdin
}



def usage ec = 0
  stream = ec == 0 ? $stdout : $stderr
  stream.puts "Usage: #{File.basename $0} [-o output] [input]"
  exit ec
end

def parse_line line
  return nil unless line
  return nil if line[0] == '/'  # skip 1st entry
  line.strip!
  return nil if line.match(/\(not local\?\)$/)

  line
end



opts = GetoptLong.new(['--help', '-h', GetoptLong::NO_ARGUMENT],
                      ['-v', GetoptLong::NO_ARGUMENT],
                      ['--version', '-V', GetoptLong::NO_ARGUMENT],
                      ['-o', GetoptLong::REQUIRED_ARGUMENT])

begin
  opts.each do |opt, arg|
    case opt
    when '--help'
      usage
    when '-v'
      $conf[:verbose] += 1
    when '--version'
      puts RubyRequireInline::VERSION
      exit 0
    when '-o'
      $conf[:output] = arg
    end
  end
rescue GetoptLong::InvalidOption
  usage 1
end

$conf[:input] = File.open ARGV[0] if ARGV.size > 0



while line = gets

  file = parse_line line
  next unless file

  if $conf[:output] != $stdout && !$conf[:output].is_a?(IO)
    $conf[:output] = File.open $conf[:output], 'w+'
  end

  code = File.read file

  $conf[:output].printf "%s\n%s%s%s\n\n", \
  "\# === BEGIN #{file} ===", \
  code,
  code[-1] == "\n" ? "" : "\n",
  "\# === END #{file} ==="
end
